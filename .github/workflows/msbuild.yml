name: Build and release visualization dll

on:
  push:
    branches:
      - master

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

  release:
    needs: build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Release Draft
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0  # Replace with your desired tag name
        release_name: Release v1.0.0  # Replace with your desired release name
        draft: false
        prerelease: false

    - name: Upload DLL
      id: upload_dll
      uses: actions/upload-artifact@v2
      with:
        name: compiled-dll
        path: ./Sources/Visualization/Microsoft.Psi.Visualization.Windows/bin/${{env.BUILD_CONFIGURATION}}/Microsoft.Psi.Visualization.Windows.dll

    - name: Get Artifact URL
      id: get_artifact_url
      run: echo "::set-output name=artifact_url::${{ steps.upload_dll.outputs.artifact_url }}"

    - name: Add Artifact Link to Release Body
      id: update_release_body
      uses: actions/github-script@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const artifactUrl = '${{ steps.get_artifact_url.outputs.artifact_url }}';
          const releaseId = '${{ steps.create_release.outputs.id }}';
          const octokit = require('@octokit/rest')();
          octokit.repos.getRelease({ owner: context.repo.owner, repo: context.repo.repo, release_id: releaseId }).then(response => {
            const release = response.data;
            const updatedBody = release.body + '\n\nCompiled DLL: ' + artifactUrl;
            octokit.repos.updateRelease({ owner: context.repo.owner, repo: context.repo.repo, release_id: releaseId, body: updatedBody });
          });

