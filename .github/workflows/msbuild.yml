name: Build and Release DLL

on:
  push:
    branches:
      - master

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore NuGet packages
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Build
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: built-dll
          path: ./Sources/Visualization/Microsoft.Psi.Visualization.Windows/bin/${{ env.BUILD_CONFIGURATION }}/net472/Microsoft.Psi.Visualization.Windows.dll

  release:
    needs: build

    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate Random Name
        id: generator
        uses: thclark/coolname-generator-action@0.0.1
        with:
          separator: '_'
          length: '3'
          style: 'upperCase'

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: built-dll

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generator.outputs.name }}
          release_name: ${{ steps.generator.outputs.name }}
          body: Release notes for version ${{ steps.generator.outputs.name }}
          draft: false
          prerelease: false

      - name: Upload DLL to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: built-dll/Microsoft.Psi.Visualization.Windows.dll
          asset_name: Microsoft.Psi.Visualization.Windows.dll
          asset_content_type: application/octet-stream
